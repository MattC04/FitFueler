import { Endpoint, HttpResponse } from '@aws-amplify/core/internals/aws-client-utils';
import type { AssociateSoftwareTokenCommandOutput as AssociateSoftwareTokenOutput, ChangePasswordCommandOutput as ChangePasswordOutput, ConfirmDeviceCommandOutput as ConfirmDeviceOutput, ConfirmForgotPasswordCommandOutput as ConfirmForgotPasswordOutput, ConfirmSignUpCommandOutput as ConfirmSignUpOutput, DeleteUserAttributesCommandOutput as DeleteUserAttributesOutput, DeleteUserCommandOutput as DeleteUserOutput, ForgotPasswordCommandOutput as ForgotPasswordOutput, GetUserAttributeVerificationCodeCommandOutput as GetUserAttributeVerificationCodeOutput, GetUserCommandOutput as GetUserOutput, GlobalSignOutCommandOutput as GlobalSignOutOutput, InitiateAuthCommandOutput as InitiateAuthOutput, ListDevicesCommandOutput as ListDevicesOutput, ResendConfirmationCodeCommandOutput as ResendConfirmationCodeOutput, RespondToAuthChallengeCommandOutput as RespondToAuthChallengeOutput, SetUserMFAPreferenceCommandOutput as SetUserMFAPreferenceOutput, SignUpCommandOutput as SignUpOutput, UpdateDeviceStatusCommandOutput as UpdateDeviceStatusOutput, UpdateUserAttributesCommandOutput as UpdateUserAttributesOutput, VerifySoftwareTokenCommandOutput as VerifySoftwareTokenOutput, VerifyUserAttributeCommandOutput as VerifyUserAttributeOutput } from './types';
interface RevokeTokenInput {
    Token: string;
    ClientId: string;
}
type RevokeTokenOutput = Record<string, unknown>;
export declare const initiateAuth: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").InitiateAuthRequest) => Promise<InitiateAuthOutput>;
export declare const revokeToken: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: RevokeTokenInput) => Promise<RevokeTokenOutput>;
export declare const signUp: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").SignUpRequest) => Promise<SignUpOutput>;
export declare const confirmSignUp: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").ConfirmSignUpRequest) => Promise<ConfirmSignUpOutput>;
export declare const forgotPassword: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").ForgotPasswordRequest) => Promise<ForgotPasswordOutput>;
export declare const confirmForgotPassword: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").ConfirmForgotPasswordRequest) => Promise<ConfirmForgotPasswordOutput>;
export declare const respondToAuthChallenge: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").RespondToAuthChallengeRequest) => Promise<RespondToAuthChallengeOutput>;
export declare const resendConfirmationCode: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").ResendConfirmationCodeRequest) => Promise<ResendConfirmationCodeOutput>;
export declare const verifySoftwareToken: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").VerifySoftwareTokenRequest) => Promise<VerifySoftwareTokenOutput>;
export declare const associateSoftwareToken: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").AssociateSoftwareTokenRequest) => Promise<AssociateSoftwareTokenOutput>;
export declare const setUserMFAPreference: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").SetUserMFAPreferenceRequest) => Promise<SetUserMFAPreferenceOutput>;
export declare const getUser: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").GetUserRequest) => Promise<GetUserOutput>;
export declare const changePassword: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").ChangePasswordRequest) => Promise<ChangePasswordOutput>;
export declare const confirmDevice: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").ConfirmDeviceRequest) => Promise<ConfirmDeviceOutput>;
export declare const forgetDevice: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").ForgetDeviceRequest) => Promise<import("@smithy/types").MetadataBearer>;
export declare const deleteUser: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").DeleteUserRequest) => Promise<DeleteUserOutput>;
export declare const getUserAttributeVerificationCode: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").GetUserAttributeVerificationCodeRequest) => Promise<GetUserAttributeVerificationCodeOutput>;
export declare const globalSignOut: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").GlobalSignOutRequest) => Promise<GlobalSignOutOutput>;
export declare const updateUserAttributes: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").UpdateUserAttributesRequest) => Promise<UpdateUserAttributesOutput>;
export declare const verifyUserAttribute: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").VerifyUserAttributeRequest) => Promise<VerifyUserAttributeOutput>;
export declare const updateDeviceStatus: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").UpdateDeviceStatusRequest) => Promise<UpdateDeviceStatusOutput>;
export declare const listDevices: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").ListDevicesRequest) => Promise<ListDevicesOutput>;
export declare const deleteUserAttributes: (config: {
    service?: string | undefined;
    endpointResolver?: (((options: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions, input?: any) => Endpoint) & (({ region }: import("@aws-amplify/core/internals/aws-client-utils").EndpointResolverOptions) => {
        url: URL;
    })) | undefined;
    retryDecider?: (((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>) & ((response?: HttpResponse | undefined, error?: unknown) => Promise<boolean>)) | undefined;
    computeDelay?: ((attempt: number) => number) | undefined;
    userAgentValue?: string | undefined;
    cache?: "no-store" | "default" | "force-cache" | "no-cache" | "only-if-cached" | "reload" | undefined;
} & {
    [x: string]: unknown;
}, input: import("./types").DeleteUserAttributesRequest) => Promise<DeleteUserAttributesOutput>;
export {};
