{"version":3,"file":"confirmResetPassword.mjs","sources":["../../../../../src/providers/cognito/apis/confirmResetPassword.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { confirmForgotPassword } from '../utils/clients/CognitoIdentityProvider';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\n/**\n * Confirms the new password and verification code to reset the password.\n *\n * @param input -  The ConfirmResetPasswordInput object.\n * @throws -{@link ConfirmForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code, password or username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function confirmResetPassword(input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId } = authConfig;\n    const { username, newPassword } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmResetPasswordUsername);\n    assertValidationError(!!newPassword, AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword);\n    const code = input.confirmationCode;\n    assertValidationError(!!code, AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode);\n    const metadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    await confirmForgotPassword({\n        region: getRegion(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmResetPassword),\n    }, {\n        Username: username,\n        ConfirmationCode: code,\n        Password: newPassword,\n        ClientMetadata: metadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n}\n"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAe,oBAAoB,CAAC,KAAK,EAAE;AAClD,IAAI,MAAM,UAAU,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;AACzD,IAAI,yBAAyB,CAAC,UAAU,CAAC,CAAC;AAC1C,IAAI,MAAM,EAAE,gBAAgB,EAAE,UAAU,EAAE,GAAG,UAAU,CAAC;AACxD,IAAI,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,KAAK,CAAC;AAC5C,IAAI,qBAAqB,CAAC,CAAC,CAAC,QAAQ,EAAE,uBAAuB,CAAC,iCAAiC,CAAC,CAAC;AACjG,IAAI,qBAAqB,CAAC,CAAC,CAAC,WAAW,EAAE,uBAAuB,CAAC,oCAAoC,CAAC,CAAC;AACvG,IAAI,MAAM,IAAI,GAAG,KAAK,CAAC,gBAAgB,CAAC;AACxC,IAAI,qBAAqB,CAAC,CAAC,CAAC,IAAI,EAAE,uBAAuB,CAAC,yCAAyC,CAAC,CAAC;AACrG,IAAI,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,EAAE,cAAc,CAAC;AACnD,IAAI,MAAM,eAAe,GAAG,kBAAkB,CAAC;AAC/C,QAAQ,QAAQ;AAChB,QAAQ,UAAU;AAClB,QAAQ,gBAAgB;AACxB,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,qBAAqB,CAAC;AAChC,QAAQ,MAAM,EAAE,SAAS,CAAC,UAAU,CAAC,UAAU,CAAC;AAChD,QAAQ,cAAc,EAAE,qBAAqB,CAAC,UAAU,CAAC,oBAAoB,CAAC;AAC9E,KAAK,EAAE;AACP,QAAQ,QAAQ,EAAE,QAAQ;AAC1B,QAAQ,gBAAgB,EAAE,IAAI;AAC9B,QAAQ,QAAQ,EAAE,WAAW;AAC7B,QAAQ,cAAc,EAAE,QAAQ;AAChC,QAAQ,QAAQ,EAAE,UAAU,CAAC,gBAAgB;AAC7C,QAAQ,eAAe;AACvB,KAAK,CAAC,CAAC;AACP;;;;"}