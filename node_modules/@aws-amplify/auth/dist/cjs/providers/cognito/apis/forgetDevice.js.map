{"version":3,"file":"forgetDevice.js","sources":["../../../../../src/providers/cognito/apis/forgetDevice.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.forgetDevice = void 0;\nconst core_1 = require(\"@aws-amplify/core\");\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst CognitoIdentityProvider_1 = require(\"../utils/clients/CognitoIdentityProvider\");\nconst types_1 = require(\"../utils/types\");\nconst utils_2 = require(\"../utils/clients/CognitoIdentityProvider/utils\");\nconst tokenProvider_1 = require(\"../tokenProvider\");\nconst utils_3 = require(\"../../../utils\");\n/**\n * Forget a remembered device while authenticated.\n *\n * @param input - The ForgetDeviceInput object.\n * @throws - {@link ForgetDeviceException} - Cognito service errors thrown when\n * forgetting device with invalid device key\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function forgetDevice(input) {\n    const { device: { id: externalDeviceKey } = { id: undefined } } = input ?? {};\n    const authConfig = core_1.Amplify.getConfig().Auth?.Cognito;\n    (0, utils_1.assertTokenProviderConfig)(authConfig);\n    const { tokens } = await (0, core_1.fetchAuthSession)();\n    (0, types_1.assertAuthTokens)(tokens);\n    const deviceMetadata = await tokenProvider_1.tokenOrchestrator.getDeviceMetadata();\n    const currentDeviceKey = deviceMetadata?.deviceKey;\n    if (!externalDeviceKey)\n        (0, types_1.assertDeviceMetadata)(deviceMetadata);\n    await (0, CognitoIdentityProvider_1.forgetDevice)({\n        region: (0, utils_2.getRegion)(authConfig.userPoolId),\n        userAgentValue: (0, utils_3.getAuthUserAgentValue)(utils_1.AuthAction.ForgetDevice),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        DeviceKey: externalDeviceKey ?? currentDeviceKey,\n    });\n    if (!externalDeviceKey || externalDeviceKey === currentDeviceKey)\n        await tokenProvider_1.tokenOrchestrator.clearDeviceMetadata();\n}\nexports.forgetDevice = forgetDevice;\n"],"names":[],"mappings":";;AACA;AACA;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC;AAC9B,MAAM,MAAM,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC5C,MAAM,OAAO,GAAG,OAAO,CAAC,mCAAmC,CAAC,CAAC;AAC7D,MAAM,yBAAyB,GAAG,OAAO,CAAC,0CAA0C,CAAC,CAAC;AACtF,MAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC1C,MAAM,OAAO,GAAG,OAAO,CAAC,gDAAgD,CAAC,CAAC;AAC1E,MAAM,eAAe,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AACpD,MAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY,CAAC,KAAK,EAAE;AACnC,IAAI,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,iBAAiB,EAAE,GAAG,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AAClF,IAAI,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;AAChE,IAAI,IAAI,OAAO,CAAC,yBAAyB,EAAE,UAAU,CAAC,CAAC;AACvD,IAAI,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,MAAM,CAAC,gBAAgB,GAAG,CAAC;AAC5D,IAAI,IAAI,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;AAC1C,IAAI,MAAM,cAAc,GAAG,MAAM,eAAe,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,CAAC;AACvF,IAAI,MAAM,gBAAgB,GAAG,cAAc,EAAE,SAAS,CAAC;AACvD,IAAI,IAAI,CAAC,iBAAiB;AAC1B,QAAQ,IAAI,OAAO,CAAC,oBAAoB,EAAE,cAAc,CAAC,CAAC;AAC1D,IAAI,MAAM,IAAI,yBAAyB,CAAC,YAAY,EAAE;AACtD,QAAQ,MAAM,EAAE,IAAI,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC,UAAU,CAAC;AAC7D,QAAQ,cAAc,EAAE,IAAI,OAAO,CAAC,qBAAqB,EAAE,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC;AAC3F,KAAK,EAAE;AACP,QAAQ,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE;AAClD,QAAQ,SAAS,EAAE,iBAAiB,IAAI,gBAAgB;AACxD,KAAK,CAAC,CAAC;AACP,IAAI,IAAI,CAAC,iBAAiB,IAAI,iBAAiB,KAAK,gBAAgB;AACpE,QAAQ,MAAM,eAAe,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,CAAC;AACtE,CAAC;AACD,OAAO,CAAC,YAAY,GAAG,YAAY;;"}