{"version":3,"file":"updatePassword.js","sources":["../../../../../src/providers/cognito/apis/updatePassword.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updatePassword = void 0;\nconst core_1 = require(\"@aws-amplify/core\");\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst validation_1 = require(\"../../../errors/types/validation\");\nconst assertValidationError_1 = require(\"../../../errors/utils/assertValidationError\");\nconst CognitoIdentityProvider_1 = require(\"../utils/clients/CognitoIdentityProvider\");\nconst utils_2 = require(\"../utils/clients/CognitoIdentityProvider/utils\");\nconst types_1 = require(\"../utils/types\");\nconst utils_3 = require(\"../../../utils\");\n/**\n * Updates user's password while authenticated.\n *\n * @param input - The UpdatePasswordInput object.\n * @throws - {@link ChangePasswordException} - Cognito service errors thrown when updating a password.\n * @throws - {@link AuthValidationErrorCode} - Validation errors thrown when oldPassword or newPassword are empty.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function updatePassword(input) {\n    const authConfig = core_1.Amplify.getConfig().Auth?.Cognito;\n    (0, utils_1.assertTokenProviderConfig)(authConfig);\n    const { oldPassword, newPassword } = input;\n    (0, assertValidationError_1.assertValidationError)(!!oldPassword, validation_1.AuthValidationErrorCode.EmptyUpdatePassword);\n    (0, assertValidationError_1.assertValidationError)(!!newPassword, validation_1.AuthValidationErrorCode.EmptyUpdatePassword);\n    const { tokens } = await (0, core_1.fetchAuthSession)({ forceRefresh: false });\n    (0, types_1.assertAuthTokens)(tokens);\n    await (0, CognitoIdentityProvider_1.changePassword)({\n        region: (0, utils_2.getRegion)(authConfig.userPoolId),\n        userAgentValue: (0, utils_3.getAuthUserAgentValue)(utils_1.AuthAction.UpdatePassword),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        PreviousPassword: oldPassword,\n        ProposedPassword: newPassword,\n    });\n}\nexports.updatePassword = updatePassword;\n"],"names":[],"mappings":";;AACA;AACA;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,cAAc,GAAG,KAAK,CAAC,CAAC;AAChC,MAAM,MAAM,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC5C,MAAM,OAAO,GAAG,OAAO,CAAC,mCAAmC,CAAC,CAAC;AAC7D,MAAM,YAAY,GAAG,OAAO,CAAC,kCAAkC,CAAC,CAAC;AACjE,MAAM,uBAAuB,GAAG,OAAO,CAAC,6CAA6C,CAAC,CAAC;AACvF,MAAM,yBAAyB,GAAG,OAAO,CAAC,0CAA0C,CAAC,CAAC;AACtF,MAAM,OAAO,GAAG,OAAO,CAAC,gDAAgD,CAAC,CAAC;AAC1E,MAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC1C,MAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc,CAAC,KAAK,EAAE;AACrC,IAAI,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;AAChE,IAAI,IAAI,OAAO,CAAC,yBAAyB,EAAE,UAAU,CAAC,CAAC;AACvD,IAAI,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,KAAK,CAAC;AAC/C,IAAI,IAAI,uBAAuB,CAAC,qBAAqB,EAAE,CAAC,CAAC,WAAW,EAAE,YAAY,CAAC,uBAAuB,CAAC,mBAAmB,CAAC,CAAC;AAChI,IAAI,IAAI,uBAAuB,CAAC,qBAAqB,EAAE,CAAC,CAAC,WAAW,EAAE,YAAY,CAAC,uBAAuB,CAAC,mBAAmB,CAAC,CAAC;AAChI,IAAI,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,MAAM,CAAC,gBAAgB,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,CAAC;AACnF,IAAI,IAAI,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;AAC1C,IAAI,MAAM,IAAI,yBAAyB,CAAC,cAAc,EAAE;AACxD,QAAQ,MAAM,EAAE,IAAI,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC,UAAU,CAAC;AAC7D,QAAQ,cAAc,EAAE,IAAI,OAAO,CAAC,qBAAqB,EAAE,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC;AAC7F,KAAK,EAAE;AACP,QAAQ,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE;AAClD,QAAQ,gBAAgB,EAAE,WAAW;AACrC,QAAQ,gBAAgB,EAAE,WAAW;AACrC,KAAK,CAAC,CAAC;AACP,CAAC;AACD,OAAO,CAAC,cAAc,GAAG,cAAc;;"}