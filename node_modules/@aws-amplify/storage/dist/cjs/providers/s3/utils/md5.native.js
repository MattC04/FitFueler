'use strict';

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateContentMd5 = void 0;
const buffer_1 = require("buffer");
const md5_js_1 = require("@smithy/md5-js");
const utils_1 = require("./client/utils");
// The FileReader in React Native 0.71 did not support `readAsArrayBuffer`. This native implementation accomodates this
// by attempting to use `readAsArrayBuffer` and changing the file reading strategy if it throws an error.
// TODO: This file should be removable when we drop support for React Native 0.71
const calculateContentMd5 = async (content) => {
    const hasher = new md5_js_1.Md5();
    if (typeof content === 'string') {
        hasher.update(content);
    }
    else if (ArrayBuffer.isView(content) || content instanceof ArrayBuffer) {
        const blob = new Blob([content]);
        const buffer = await readFile(blob);
        hasher.update(buffer);
    }
    else {
        const buffer = await readFile(content);
        hasher.update(buffer);
    }
    const digest = await hasher.digest();
    return (0, utils_1.toBase64)(digest);
};
exports.calculateContentMd5 = calculateContentMd5;
const readFile = (file) => new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => {
        resolve(reader.result);
    };
    reader.onabort = () => {
        reject(new Error('Read aborted'));
    };
    reader.onerror = () => {
        reject(reader.error);
    };
    try {
        reader.readAsArrayBuffer(file);
    }
    catch (e) {
        reader.onload = () => {
            // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
            // response from readAsDataURL is always prepended with "data:*/*;base64,"
            const [, base64Data] = reader.result.split(',');
            const arrayBuffer = buffer_1.Buffer.from(base64Data, 'base64');
            resolve(arrayBuffer);
        };
        reader.readAsDataURL(file);
    }
});
//# sourceMappingURL=md5.native.js.map
