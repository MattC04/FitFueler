"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const react_native_1 = require("react-native");
const utils_1 = require("aws-amplify/utils");
const types_1 = require("./types");
const utils_2 = require("./utils");
const logger = new utils_1.ConsoleLogger('InAppMessaging');
/**
 * Handles prefetching and dimension setting for message images
 *
 * @param image contains image source
 * @param layout message layout
 * @returns message image dimensions and rendering related booleans
 */
function useMessageImage(image, layout) {
    const { src } = image ?? {};
    const shouldPrefetch = !!src;
    // set initial status to fetching if prefetch is required
    const [prefetchStatus, setPrefetchStatus] = (0, react_1.useState)(shouldPrefetch ? types_1.ImagePrefetchStatus.Fetching : null);
    const imageDimensions = (0, react_1.useRef)({
        height: undefined,
        width: undefined,
    }).current;
    const isImageFetching = prefetchStatus === types_1.ImagePrefetchStatus.Fetching;
    const hasRenderableImage = prefetchStatus === types_1.ImagePrefetchStatus.Success;
    (0, react_1.useEffect)(() => {
        if (!shouldPrefetch) {
            return;
        }
        (0, utils_2.prefetchNetworkImage)(src).then((prefetchResult) => {
            if (prefetchResult === 'loaded') {
                // get image size once loaded
                react_native_1.Image.getSize(src, (imageWidth, imageHeight) => {
                    const { height, width } = (0, utils_2.getLayoutImageDimensions)(imageHeight, imageWidth, layout);
                    imageDimensions.height = height;
                    imageDimensions.width = width;
                    setPrefetchStatus(types_1.ImagePrefetchStatus.Success);
                }, (error) => {
                    // handle size retrieval error
                    logger.error(`Unable to retrieve size for image: ${error}`);
                    setPrefetchStatus(types_1.ImagePrefetchStatus.Failure);
                });
            }
            else {
                // handle prefetch failure
                setPrefetchStatus(types_1.ImagePrefetchStatus.Failure);
            }
        });
    }, [imageDimensions, layout, shouldPrefetch, src]);
    return { hasRenderableImage, imageDimensions, isImageFetching };
}
exports.default = useMessageImage;
