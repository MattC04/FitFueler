"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLayoutImageDimensions = exports.prefetchNetworkImage = void 0;
const react_native_1 = require("react-native");
const utils_1 = require("aws-amplify/utils");
const constants_1 = require("./constants");
const logger = new utils_1.ConsoleLogger('InAppMessaging');
const inAppMessageImageSizes = {
    BOTTOM_BANNER: constants_1.BANNER_IMAGE_SCREEN_SIZE,
    MIDDLE_BANNER: constants_1.BANNER_IMAGE_SCREEN_SIZE,
    TOP_BANNER: constants_1.BANNER_IMAGE_SCREEN_SIZE,
    CAROUSEL: constants_1.CAROUSEL_IMAGE_SCREEN_SIZE,
    FULL_SCREEN: constants_1.FULL_SCREEN_IMAGE_SCREEN_SIZE,
    MODAL: constants_1.MODAL_IMAGE_SCREEN_SIZE,
};
const prefetchNetworkImage = async (url) => {
    try {
        const loaded = await react_native_1.Image.prefetch(url);
        if (loaded) {
            return 'loaded';
        }
        logger.error(`Image failed to load: ${url}`);
        return 'failed';
    }
    catch (e) {
        logger.error(`Image.prefetch failed: ${e}`);
        return 'failed';
    }
};
exports.prefetchNetworkImage = prefetchNetworkImage;
const getLayoutImageDimensions = (imageHeight, imageWidth, layout) => {
    // determine aspect ratio for scaling rendered image
    const aspectRatio = imageWidth / imageHeight;
    const isSquare = aspectRatio === 1;
    const isPortrait = imageHeight > imageWidth;
    const isLandscape = imageWidth > imageHeight;
    // an image that has smaller dimensions than the max image dimension (e.g. 10px x 10px)
    // will be scaled up in size to match the size the message component expects.
    // While this could lead to pixelated images, it was ultimately a product decision,
    // ideally the message creator would follow the image guidelines in the pinpoint console
    const maxImageDimension = inAppMessageImageSizes[layout];
    let height = undefined;
    let width = undefined;
    // set square image dimensions
    if (isSquare) {
        height = maxImageDimension;
        width = maxImageDimension;
    }
    // set portrait image dimensions
    if (isPortrait) {
        height = maxImageDimension;
        width = maxImageDimension * aspectRatio;
    }
    // set landscape image dimensions
    if (isLandscape) {
        height = maxImageDimension / aspectRatio;
        width = maxImageDimension;
    }
    return { height, width };
};
exports.getLayoutImageDimensions = getLayoutImageDimensions;
