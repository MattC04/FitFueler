"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const ui_1 = require("@aws-amplify/ui");
const useMessageImage_1 = require("../useMessageImage");
const utils_1 = require("./utils");
/**
 * Handle common message UI component prop logic including setting of image dimensions,
 * render booleans, and style resolving
 *
 * @param {MessageComponentBaseProps} props - message UI component props
 * @param {GetDefaultStyle} getDefaultStyle - returns default UI component style
 *
 * @returns {UseMessageProps} message UI component render related booleans and styles
 */
function useMessageProps(props, getDefaultStyle) {
    const { image, layout, onDisplay, primaryButton, secondaryButton } = props;
    const hasDisplayed = (0, react_1.useRef)(false);
    const { hasRenderableImage, imageDimensions, isImageFetching } = (0, useMessageImage_1.useMessageImage)(image, layout);
    const shouldRenderMessage = !isImageFetching;
    (0, react_1.useEffect)(() => {
        if (!hasDisplayed.current && shouldRenderMessage) {
            onDisplay?.();
            hasDisplayed.current = true;
        }
    }, [onDisplay, shouldRenderMessage]);
    const hasPrimaryButton = !(0, ui_1.isEmpty)(primaryButton);
    const hasSecondaryButton = !(0, ui_1.isEmpty)(secondaryButton);
    const hasButtons = hasPrimaryButton || hasSecondaryButton;
    const styles = (0, react_1.useMemo)(() => {
        // prevent generating style if message rendering is delayed
        if (!shouldRenderMessage) {
            return null;
        }
        const defaultStyle = getDefaultStyle(imageDimensions);
        const payloadStyle = (0, utils_1.getPayloadStyle)(props);
        const overrideStyle = props.style;
        return (0, utils_1.getMessageStyles)({
            styleParams: { defaultStyle, payloadStyle, overrideStyle },
            layout,
        });
    }, [getDefaultStyle, layout, imageDimensions, props, shouldRenderMessage]);
    return {
        hasButtons,
        hasPrimaryButton,
        hasRenderableImage,
        hasSecondaryButton,
        shouldRenderMessage,
        styles,
    };
}
exports.default = useMessageProps;
