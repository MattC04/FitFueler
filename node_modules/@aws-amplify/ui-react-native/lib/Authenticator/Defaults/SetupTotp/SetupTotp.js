"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const ui_1 = require("@aws-amplify/ui");
const primitives_1 = require("../../../primitives");
const common_1 = require("../../common");
const hooks_1 = require("../../hooks");
const styles_1 = require("./styles");
const COMPONENT_NAME = 'SetupTotp';
const { getBackToSignInText, getConfirmingText, getConfirmText, getSetupTotpText, getSetupTotpInstructionsText, } = ui_1.authenticatorTextUtil;
const SetupTotp = ({ fields, handleBlur, handleChange, handleSubmit, isPending, toSignIn, totpSecretCode, validationErrors, ...rest }) => {
    const { disableFormSubmit: disabled, fields: fieldsWithHandlers, fieldValidationErrors, handleFormSubmit, } = (0, hooks_1.useFieldValues)({
        componentName: COMPONENT_NAME,
        fields,
        handleBlur,
        handleChange,
        handleSubmit,
        validationErrors,
    });
    const headerText = getSetupTotpText();
    const primaryButtonText = isPending ? getConfirmingText() : getConfirmText();
    const secondaryButtonText = getBackToSignInText();
    const body = (<>
      <primitives_1.Label style={styles_1.styles.secretKeyText}>
        {getSetupTotpInstructionsText()}
      </primitives_1.Label>
      <primitives_1.Label selectable style={styles_1.styles.secretKeyText}>
        {totpSecretCode}
      </primitives_1.Label>
    </>);
    const buttons = (0, react_1.useMemo)(() => ({
        primary: {
            children: primaryButtonText,
            disabled,
            onPress: handleFormSubmit,
        },
        links: [{ children: secondaryButtonText, onPress: toSignIn }],
    }), [
        disabled,
        handleFormSubmit,
        primaryButtonText,
        secondaryButtonText,
        toSignIn,
    ]);
    return (<common_1.DefaultContent {...rest} body={body} buttons={buttons} headerText={headerText} fields={fieldsWithHandlers} isPending={isPending} validationErrors={fieldValidationErrors}/>);
};
SetupTotp.Footer = common_1.DefaultFooter;
SetupTotp.FormFields = common_1.DefaultTextFormFields;
SetupTotp.Header = common_1.DefaultHeader;
SetupTotp.displayName = COMPONENT_NAME;
exports.default = SetupTotp;
