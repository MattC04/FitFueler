"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const react_native_safe_area_context_1 = require("react-native-safe-area-context");
const ui_react_core_1 = require("@aws-amplify/ui-react-core");
const hooks_1 = require("../hooks");
const common_1 = require("./common");
const hooks_2 = require("./hooks");
const version_1 = require("../version");
const Defaults_1 = require("./Defaults");
const DEFAULTS = {
    ConfirmResetPassword: Defaults_1.ConfirmResetPassword,
    ConfirmSignIn: Defaults_1.ConfirmSignIn,
    ConfirmSignUp: Defaults_1.ConfirmSignUp,
    ConfirmVerifyUser: Defaults_1.ConfirmVerifyUser,
    ForceNewPassword: Defaults_1.ForceNewPassword,
    ForgotPassword: Defaults_1.ForgotPassword,
    SetupTotp: Defaults_1.SetupTotp,
    SignIn: Defaults_1.SignIn,
    SignUp: Defaults_1.SignUp,
    VerifyUser: Defaults_1.VerifyUser,
};
const routePropSelector = ({ route, }) => [
    route,
];
function Authenticator({ children, components: overrides, Container = common_1.DefaultContainer, Footer, Header, ...options }) {
    (0, hooks_1.useDeprecationWarning)({
        message: 'The `passwordSettings` prop has been deprecated and will be removed in a future major version of Amplify UI.',
        // shouldWarn: !!options?.passwordSettings,
        /**
         * @migration turn off until getConfig returns zero config
         */
        shouldWarn: false,
    });
    (0, ui_react_core_1.useSetUserAgent)({
        componentName: 'Authenticator',
        packageName: 'react-native',
        version: version_1.VERSION,
    });
    (0, ui_react_core_1.useAuthenticatorInitMachine)(options);
    const { fields, route } = (0, ui_react_core_1.useAuthenticator)(routePropSelector);
    const components = (0, react_1.useMemo)(
    // allow any to prevent TS from assuming that all fields are of type `TextFieldOptions`
    () => (0, ui_react_core_1.resolveAuthenticatorComponents)(DEFAULTS, overrides), [overrides]);
    const { Component, props } = (0, ui_react_core_1.useAuthenticatorRoute)({ components });
    const typedFields = (0, hooks_2.getRouteTypedFields)({ fields, route });
    const isAuthenticatedRoute = route === 'authenticated' || route === 'signOut';
    if (isAuthenticatedRoute) {
        return children ? <>{children}</> : null;
    }
    return (<react_native_safe_area_context_1.SafeAreaProvider>
      <Container>
        {Header ? <Header /> : null}
        <common_1.InnerContainer>
          <Component {...props} fields={typedFields}/>
        </common_1.InnerContainer>
        {Footer ? <Footer /> : null}
      </Container>
    </react_native_safe_area_context_1.SafeAreaProvider>);
}
// assign slot components
Authenticator.Container = common_1.DefaultContainer;
Authenticator.Provider = ui_react_core_1.AuthenticatorProvider;
Authenticator.ConfirmResetPassword = Defaults_1.ConfirmResetPassword;
Authenticator.ConfirmSignIn = Defaults_1.ConfirmSignIn;
Authenticator.ConfirmSignUp = Defaults_1.ConfirmSignUp;
Authenticator.ConfirmVerifyUser = Defaults_1.ConfirmVerifyUser;
Authenticator.ForceNewPassword = Defaults_1.ForceNewPassword;
Authenticator.ForgotPassword = Defaults_1.ForgotPassword;
Authenticator.SetupTotp = Defaults_1.SetupTotp;
Authenticator.SignIn = Defaults_1.SignIn;
Authenticator.SignUp = Defaults_1.SignUp;
Authenticator.VerifyUser = Defaults_1.VerifyUser;
exports.default = Authenticator;
