"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_safe_area_context_1 = require("react-native-safe-area-context");
const theme_1 = require("../../../theme");
const utils_1 = require("../../../utils");
const styles_1 = require("./styles");
// prevent bounce when `ScrollView` content is less than height of screnn
const ALWAYS_BOUNCE_VERTICAL = false;
const BEHAVIOR = utils_1.platform.IS_IOS ? 'padding' : 'height';
// prevent keyboard dismiss when press is handled by `ScrollView` children,
// otherwise dismiss
const KEYBOARD_SHOULD_PERSIST_TAPS = 'handled';
function DefaultContainer({ alwaysBounceVertical = ALWAYS_BOUNCE_VERTICAL, behavior = BEHAVIOR, children, keyboardAvoidingViewStyle, keyboardShouldPersistTaps = KEYBOARD_SHOULD_PERSIST_TAPS, keyboardVerticalOffset, scrollViewContentContainerStyle, style, ...rest }) {
    const theme = (0, theme_1.useTheme)();
    const insets = (0, react_native_safe_area_context_1.useSafeAreaInsets)();
    const themedStyle = (0, react_1.useMemo)(() => {
        const { bottom, left, right, top } = insets;
        return (0, styles_1.getThemedStyles)(theme, {
            paddingBottom: bottom,
            paddingLeft: left,
            paddingRight: right,
            paddingTop: top,
        });
    }, [insets, theme]);
    return (<react_native_1.KeyboardAvoidingView behavior={behavior} keyboardVerticalOffset={keyboardVerticalOffset} style={[themedStyle.keyboardAvoidingView, keyboardAvoidingViewStyle]}>
      <react_native_1.ScrollView {...rest} alwaysBounceVertical={alwaysBounceVertical} keyboardShouldPersistTaps={keyboardShouldPersistTaps} contentContainerStyle={[
            themedStyle.scrollViewContentContainer,
            scrollViewContentContainerStyle,
        ]} style={[themedStyle.scrollView, style]}>
        {children}
      </react_native_1.ScrollView>
    </react_native_1.KeyboardAvoidingView>);
}
exports.default = DefaultContainer;
