"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const react_native_1 = require("react-native");
const ui_1 = require("@aws-amplify/ui");
const primitives_1 = require("../../../primitives");
const theme_1 = require("../../../theme");
const FederatedProviderButton_1 = require("../FederatedProviderButton");
const assets_1 = require("../../../assets");
const styles_1 = require("./styles");
const { getSignInWithFederationText, getOrText } = ui_1.authenticatorTextUtil;
function FederatedProviderButtons({ buttonStyle, dividerLabelStyle, route, socialProviders, style, toFederatedSignIn, }) {
    const theme = (0, theme_1.useTheme)();
    const themedStyle = (0, styles_1.getThemedStyles)(theme);
    const providerButtons = (0, react_1.useMemo)(() => socialProviders?.map((provider) => {
        const providerIconSource = assets_1.icons[`${provider}Logo`];
        const handlePress = () => {
            toFederatedSignIn({ provider: (0, ui_1.capitalize)(provider) });
        };
        return (<FederatedProviderButton_1.FederatedProviderButton key={provider} onPress={handlePress} source={providerIconSource} style={[themedStyle.button, buttonStyle]}>
            {getSignInWithFederationText(route, provider)}
          </FederatedProviderButton_1.FederatedProviderButton>);
    }), [route, socialProviders, themedStyle, buttonStyle, toFederatedSignIn]);
    return providerButtons?.length ? (<react_native_1.View style={[themedStyle.container, style]} testID="amplify__federated-provider-buttons">
      {providerButtons}
      <primitives_1.Divider labelStyle={[themedStyle.dividerLabel, dividerLabelStyle]}>
        {getOrText()}
      </primitives_1.Divider>
    </react_native_1.View>) : null;
}
exports.default = FederatedProviderButtons;
