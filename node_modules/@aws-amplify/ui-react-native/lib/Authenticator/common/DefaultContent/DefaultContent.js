"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const react_native_1 = require("react-native");
const primitives_1 = require("../../../primitives");
const theme_1 = require("../../../theme");
const styles_1 = require("./styles");
function useThemedStyles(getStyle) {
    const theme = (0, theme_1.useTheme)();
    return (0, react_1.useMemo)(() => getStyle(theme), [getStyle, theme]);
}
function DefaultContent({ body, buttons: { primary, links, secondary }, error, fields, Footer, FormFields, isPending, Header, headerText, validationErrors, }) {
    const themedStyles = useThemedStyles(styles_1.getDefaultStyle);
    const linkButtons = (0, react_1.useMemo)(() => links?.length ? (<react_native_1.View style={themedStyles.linksContainer}>
          {links.map((button) => (<react_1.Fragment key={`${button.children}`}>
              <primitives_1.Button {...button} style={themedStyles.link} variant="link"/>
            </react_1.Fragment>))}
        </react_native_1.View>) : null, [links, themedStyles]);
    return (<>
      <Header style={themedStyles.header}>{headerText}</Header>
      {body ? (typeof body === 'string' ? (<primitives_1.Label style={themedStyles.body}>{body}</primitives_1.Label>) : (body)) : null}
      <FormFields fieldContainerStyle={themedStyles.fieldContainer} fieldErrorsContainer={themedStyles.fieldErrorsContainer} fieldErrorStyle={themedStyles.fieldError} fieldLabelStyle={themedStyles.fieldLabel} fieldStyle={themedStyles.fieldStyle} fields={fields} isPending={isPending} validationErrors={validationErrors} style={themedStyles.formFields}/>
      {error ? (<primitives_1.ErrorMessage iconStyle={themedStyles.errorMessageIcon} labelStyle={themedStyles.errorMessageLabel} style={themedStyles.errorMessage} testID="amplify__error-message">
          {error}
        </primitives_1.ErrorMessage>) : null}
      <primitives_1.Button {...primary} variant="primary" textStyle={themedStyles.buttonPrimaryLabel} style={themedStyles.buttonPrimary} testID="amplify__button"/>
      {secondary ? (<primitives_1.Button {...secondary} textStyle={themedStyles.buttonSecondaryLabel} style={themedStyles.buttonSecondary}/>) : null}
      {linkButtons}
      <Footer style={themedStyles.footer}/>
    </>);
}
exports.default = DefaultContent;
