"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const react_native_1 = require("react-native");
const primitives_1 = require("../../../primitives");
const utils_1 = require("../../../utils");
const { IS_IOS } = utils_1.platform;
// to prevent issues with iOS when multiple `TextInput` components have `secureTextEntry`
// set to `true`, insert a "hidden" `TextInput` after each `PasswordField`
// Issue reference: https://github.com/facebook/react-native/issues/21911
const HIDDEN_INPUT_PROPS = {
    // prevent iOS screen reader from picking up element
    accessibilityElementsHidden: true,
    // prevent `TextInput` from capturing touch events
    pointerEvents: 'none',
    // this workaround requires the `height` and `width` applied to the `TextInput`
    // are greater than `0`
    // NOTE: do not attempt to set an opacity value here to further hide the element,
    // it will cause the issues mitigated by this workaround to re-surface
    style: { backgroundColor: 'transparent', height: 0.1, width: 0.1 },
};
const HiddenInput = () => <react_native_1.TextInput {...HIDDEN_INPUT_PROPS}/>;
const Field = ({ type, ...rest }) => {
    const isPassword = type === 'password';
    const Field = isPassword
        ? primitives_1.PasswordField
        : type === 'phone'
            ? primitives_1.PhoneNumberField
            : primitives_1.TextField;
    return IS_IOS && isPassword ? (<>
      <Field {...rest}/>
      <HiddenInput />
    </>) : (<Field {...rest}/>);
};
Field.displayName = 'Field';
exports.default = Field;
