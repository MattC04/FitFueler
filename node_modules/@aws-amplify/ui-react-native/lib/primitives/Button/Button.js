"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const react_native_1 = require("react-native");
const ui_1 = require("@aws-amplify/ui");
const hooks_1 = require("../../hooks");
const theme_1 = require("../../theme");
const styles_1 = require("./styles");
function Button({ accessibilityRole = 'button', children, disabled, style, textStyle, variant = 'default', ...rest }) {
    const theme = (0, theme_1.useTheme)();
    const themedStyle = (0, styles_1.getThemedStyles)(theme);
    const containerStyle = (0, react_1.useMemo)(() => ({
        ...themedStyle.container,
        ...themedStyle[`container${(0, ui_1.capitalize)(variant)}`],
        ...(disabled && themedStyle.disabled),
    }), [disabled, themedStyle, variant]);
    const pressableStyle = (0, hooks_1.usePressableContainerStyles)({
        overrideStyle: style,
        containerStyle,
        pressedStyle: themedStyle.pressed,
    });
    const buttonTextStyle = (0, react_1.useMemo)(() => ({
        ...themedStyle.text,
        ...themedStyle[`text${(0, ui_1.capitalize)(variant)}`],
    }), [themedStyle, variant]);
    return (<react_native_1.Pressable {...rest} accessibilityRole={accessibilityRole} disabled={disabled} style={pressableStyle}>
      {typeof children === 'string' ? (<react_native_1.Text style={[buttonTextStyle, textStyle]}>{children}</react_native_1.Text>) : (children)}
    </react_native_1.Pressable>);
}
exports.default = Button;
