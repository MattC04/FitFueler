"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DOT_TEST_ID = exports.CONTAINER_TEST_ID = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const react_native_1 = require("react-native");
const theme_1 = require("../../theme");
const Label_1 = require("../Label");
const utils_1 = require("../Label/utils");
const hooks_1 = require("../../hooks");
const styles_1 = require("./styles");
const getRadioDimensions_1 = require("./getRadioDimensions");
exports.CONTAINER_TEST_ID = 'amplify__radio-button__container';
exports.DOT_TEST_ID = 'amplify__radio-button__dot';
function Radio({ accessibilityRole = 'radio', disabled, label, labelPosition = 'end', labelStyle, onChange, onPress, radioContainerStyle, radioDotStyle, selected, size = 'medium', style, value, ...rest }) {
    const theme = (0, theme_1.useTheme)();
    const themedStyle = (0, styles_1.getThemedStyles)(theme);
    const handleOnChange = (0, react_1.useCallback)((event) => {
        if (!disabled) {
            onChange?.(value);
            onPress?.(event);
        }
    }, [disabled, onChange, onPress, value]);
    const containerStyle = (0, react_1.useMemo)(() => ({
        ...themedStyle.container,
        flexDirection: (0, utils_1.getFlexDirectionFromLabelPosition)(labelPosition),
        ...(disabled && themedStyle.disabled),
    }), [disabled, labelPosition, themedStyle]);
    const pressableStyle = (0, hooks_1.usePressableContainerStyles)({
        overrideStyle: style,
        containerStyle,
        pressedStyle: themedStyle.pressed,
    });
    const { radioContainerDimensions, radioDotDimensions } = (0, react_1.useMemo)(() => (0, getRadioDimensions_1.getRadioDimensions)(size, themedStyle), [size, themedStyle]);
    return (<react_native_1.Pressable {...rest} accessibilityRole={accessibilityRole} onPress={handleOnChange} style={pressableStyle}>
      <react_native_1.View style={[
            themedStyle.radioContainer,
            radioContainerDimensions,
            radioContainerStyle,
        ]} testID={exports.CONTAINER_TEST_ID}>
        {selected ? (<react_native_1.View style={[themedStyle.radioDot, radioDotDimensions, radioDotStyle]} testID={exports.DOT_TEST_ID}/>) : null}
      </react_native_1.View>
      {label ? <Label_1.Label style={labelStyle}>{label}</Label_1.Label> : null}
    </react_native_1.Pressable>);
}
exports.default = Radio;
