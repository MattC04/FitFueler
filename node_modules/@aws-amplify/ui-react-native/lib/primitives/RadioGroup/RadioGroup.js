"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const react_native_1 = require("react-native");
const ui_react_core_1 = require("@aws-amplify/ui-react-core");
const theme_1 = require("../../theme");
const Label_1 = require("../Label");
const utils_1 = require("../Label/utils");
const styles_1 = require("./styles");
function RadioGroup({ accessible = true, accessibilityRole = 'radiogroup', children, direction = 'vertical', disabled, initialValue, label, labelPosition = 'top', labelStyle, onChange, onValueChange, size, style, ...rest }) {
    const theme = (0, theme_1.useTheme)();
    const themedStyle = (0, styles_1.getThemedStyles)(theme);
    const [value, setValue] = (0, react_1.useState)(initialValue);
    // track `hasValueUpdated` and `hasOnValueChangeUpdated`,
    // only call `onValueChange` on `value` update
    const hasValueUpdated = (0, ui_react_core_1.useHasValueUpdated)(value);
    const hasOnValueChangeUpdated = (0, ui_react_core_1.useHasValueUpdated)(onValueChange);
    (0, react_1.useEffect)(() => {
        if (hasValueUpdated) {
            onValueChange?.(value);
        }
    }, [hasOnValueChangeUpdated, hasValueUpdated, onValueChange, value]);
    const containerStyle = (0, react_1.useMemo)(() => ({
        flexDirection: (0, utils_1.getFlexDirectionFromLabelPosition)(labelPosition),
    }), [labelPosition]);
    const childContainerStyle = (0, react_1.useMemo)(() => ({ flexDirection: direction === 'horizontal' ? 'row' : 'column' }), [direction]);
    const handleChange = (0, react_1.useCallback)((nextValue) => {
        setValue(nextValue);
        onChange?.(nextValue);
    }, [onChange]);
    return (<react_native_1.View {...rest} style={[themedStyle.container, containerStyle, style]}>
      <react_native_1.View accessible={accessible} accessibilityRole={accessibilityRole} style={childContainerStyle}>
        {react_1.Children.map(children, (child) => {
            if ((0, react_1.isValidElement)(child)) {
                const { disabled: childDisabled, onChange: childOnChange, value: childValue, size: childSize, } = child.props;
                const isChildDisabled = typeof childDisabled === 'boolean' ? childDisabled : disabled;
                const isChildSelected = childValue === value;
                return (0, react_1.cloneElement)(child, {
                    ...child.props,
                    disabled: isChildDisabled,
                    onChange: (nextValue) => {
                        childOnChange?.(nextValue);
                        handleChange(nextValue);
                    },
                    selected: isChildSelected,
                    size: childSize ?? size,
                });
            }
        })}
      </react_native_1.View>
      {label ? (<Label_1.Label style={[themedStyle.label, labelStyle]}>{label}</Label_1.Label>) : null}
    </react_native_1.View>);
}
exports.default = RadioGroup;
