"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const react_native_1 = require("react-native");
const CarouselPageIndicator_1 = tslib_1.__importDefault(require("./CarouselPageIndicator"));
const constants_1 = require("./constants");
const styles_1 = require("./styles");
function Carousel(props) {
    const { data, indicatorActiveStyle, indicatorInactiveStyle, renderItem, style, } = props;
    const flatListRef = (0, react_1.useRef)(null);
    const indexRef = (0, react_1.useRef)(0);
    const [currentIndex, setCurrentIndex] = (0, react_1.useState)(0);
    const windowWidthRef = (0, react_1.useRef)(react_native_1.Dimensions.get('window').width);
    const [width, setWidth] = (0, react_1.useState)(windowWidthRef.current);
    const onViewableItemsChanged = (0, react_1.useRef)(({ viewableItems }) => {
        if (viewableItems.length !== 1) {
            return;
        }
        const [item] = viewableItems;
        indexRef.current = item.index;
        setCurrentIndex(indexRef.current);
    });
    const updateOrientation = (0, react_1.useCallback)((updatedWidth) => {
        if (windowWidthRef.current !== updatedWidth) {
            windowWidthRef.current = updatedWidth;
            setWidth(updatedWidth);
        }
    }, []);
    (0, react_1.useEffect)(() => {
        // on width change (due to orientation change), jump to the new index offset
        flatListRef?.current?.scrollToOffset({
            offset: width * indexRef.current,
            animated: false,
        });
    }, [width]);
    (0, react_1.useEffect)(() => {
        const orientationHandler = ({ window }) => {
            updateOrientation(window.width);
        };
        const subscription = react_native_1.Dimensions.addEventListener('change', orientationHandler);
        return subscription.remove;
    }, [updateOrientation]);
    const carouselRenderItem = (renderInfo) => (<react_native_1.View style={{ width }}>{renderItem(renderInfo)}</react_native_1.View>);
    if (!data?.length) {
        return null;
    }
    return (<>
      <react_native_1.FlatList bounces={false} data={data} decelerationRate="fast" disableIntervalMomentum horizontal onViewableItemsChanged={onViewableItemsChanged.current} ref={flatListRef} renderItem={carouselRenderItem} renderToHardwareTextureAndroid showsHorizontalScrollIndicator={false} showsVerticalScrollIndicator={false} snapToAlignment="start" snapToInterval={width} style={style} viewabilityConfig={constants_1.VIEWABILITY_CONFIG}/>
      <CarouselPageIndicator_1.default activeStyle={indicatorActiveStyle} currentIndex={currentIndex} inactiveStyle={indicatorInactiveStyle} numberOfItems={data.length} style={styles_1.styles.indicator}/>
    </>);
}
exports.default = Carousel;
